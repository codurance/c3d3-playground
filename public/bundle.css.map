{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/charts/GridView.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, afterUpdate } from \"svelte\";\n  import Card, {\n    Content,\n    Actions,\n    ActionIcons,\n    PrimaryAction\n  } from \"@smui/card\";\n  import IconButton, { Icon } from \"@smui/icon-button\";\n  import Button, { Label } from \"@smui/button\";\n  import { fade, draw, fly } from \"svelte/transition\";\n  import { ABSBarcelonaMapEndpoint } from \"../store.endpoint.js\";\n  import { ABSFilter, getAbsCode, filterABS } from \"../store.abs.js\";\n  import { ColorGender } from \"../store.gender.js\";\n  import Search from \"./filters/Search.svelte\";\n  import CardWrapper from \"../Card.svelte\";\n  import Table from \"./Table.svelte\";\n\n  const PATH = d3.geoPath();\n\n  export let listVisualization = false;\n  let features;\n  let barcelona;\n  let colorScaleExtent = [0, 0];\n  let ABSSelected;\n  let dialog;\n  let favoriteClicked = false;\n\n  $: featuresFiltered = filterABS(features, $ABSFilter);\n\n  $: paths = [];\n  $: quantize = d3\n    .scaleQuantize()\n    .domain(colorScaleExtent)\n    .range(ColorGender.Mix);\n  $: absElement = null;\n  $: cardStyle = listVisualization\n    ? \"margin-bottom: 25px;\"\n    : \"box-shadow:2px 2px rgba(0,0,0,0.2)\";\n  $: cardWrapper = listVisualization ? \"\" : \"display:grid;\";\n\n  onMount(async () => {\n    const data = await fetch(ABSBarcelonaMapEndpoint);\n\n    barcelona = await data.json();\n\n    features = await topojson\n      .feature(barcelona, barcelona.objects[\"ABS_2018\"])\n      .features.sort((a, b) => getAbsCode(a).localeCompare(getAbsCode(b)));\n\n    colorScaleExtent = d3.extent(\n      barcelona.objects.ABS_2018.geometries.map(({ properties }) =>\n        properties.VALORES ? properties.VALORES[2] : 0\n      )\n    );\n  });\n\n  afterUpdate(() => {\n    paths = document.querySelectorAll(\".paths\");\n  });\n\n  function handleMouseOver() {\n    absElement = d3.select(this);\n    absElement.attr(\"opacity\", \"1\");\n  }\n\n  function handleMouseOut() {\n    absElement = d3.select(this);\n    absElement.attr(\"opacity\", \"0.3\");\n  }\n\n  function handleOnClick(absSelected) {\n    if (!favoriteClicked) {\n      ABSSelected = absSelected;\n\n      dialog.open();\n    }\n    favoriteClicked = false;\n  }\n</script>\n\n<style>\n  .mdc-card__actions {\n    display: none !important;\n  }\n</style>\n\n<CardWrapper>\n\n  <div slot=\"filter\" class=\"filter\">\n    <Search />\n  </div>\n\n  <Table bind:ABSSelected bind:dialog />\n\n  <div style={cardWrapper} class=\"cardWrapper\">\n    {#if featuresFiltered}\n      {#each featuresFiltered as feature, i}\n        <Card style={cardStyle} class=\"card-grid card-wrapping-chart\">\n          <PrimaryAction on:click={() => handleOnClick(feature)}>\n            <Content style=\"color: #888;\">\n              <span style=\"color: black;\">{feature.properties.NOMSS} -</span>\n              <b>{getAbsCode(feature)}</b>\n              <IconButton\n                style=\"float: right; top: -13px;\"\n                toggle\n                on:click={() => (favoriteClicked = true)}\n                aria-label=\"Add to favorites\"\n                title=\"Add to favorites\">\n                <Icon class=\"material-icons\" on>favorite</Icon>\n                <Icon class=\"material-icons\">favorite_border</Icon>\n              </IconButton>\n            </Content>\n            {#if !listVisualization}\n              <svg\n                width=\"350px\"\n                height=\"200px\"\n                style=\"left: 4%;\"\n                viewBox={`\n          ${(paths[i] && paths[i].getBBox().x) || 0}\n          ${(paths[i] && paths[i].getBBox().y) || 0}\n          350\n          200`}\n                on:mouseover={handleMouseOver}\n                on:mouseout={handleMouseOut}\n                opacity=\"0.6\">\n                <g out:fly={{ y: -20, duration: 100 }}>\n                  <path\n                    in:draw={{ duration: 1500 }}\n                    id={`path-${getAbsCode(feature)}`}\n                    class={`paths`}\n                    d={PATH(feature)}\n                    fill={quantize(Number(feature.properties.VALORES ? feature.properties.VALORES[2] : 0))}\n                    stroke=\"black\" />\n                </g>\n              </svg>\n              <Content style=\"color: #888; font-size: 10px; padding-top: 0;\">\n                Per més informació\n              </Content>\n            {/if}\n          </PrimaryAction>\n        </Card>\n      {/each}\n    {/if}\n  </div>\n\n</CardWrapper>\n"
  ],
  "names": [],
  "mappings": "AAkFE,kBAAkB,eAAC,CAAC,AAClB,OAAO,CAAE,IAAI,CAAC,UAAU,AAC1B,CAAC"
}